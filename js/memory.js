
import { num2hex } from "./utils.js";

export default class Memory {

    memArray;
    display;

    constructor() {
        this.memArray = new Array(0xfe00);
        this.memArray.push(0x48, 0x8a, 0x48, 0x98, 0x48, 0xa4, 0xf6, 0xb9, 0x1c, 0xfe, 0x18, 0x65, 0xf5, 0x85, 0xf7, 0xb9, 0x35);
        this.memArray.push(0xfe, 0x69, 0x00, 0x85, 0xf8, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x00, 0x50, 0xa0, 0xf0, 0x40, 0x90);
        this.memArray.push(0xe0, 0x30, 0x80, 0xd0, 0x20, 0x70, 0xc0, 0x10, 0x60, 0xb0, 0x00, 0x50, 0xa0, 0xf0, 0x40, 0x90, 0xe0);
        this.memArray.push(0x30, 0x80, 0xf0, 0xf0, 0xf0, 0xf0, 0xf1, 0xf1, 0xf1, 0xf2, 0xf2, 0xf2, 0xf3, 0xf3, 0xf3, 0xf4, 0xf4);
        this.memArray.push(0xf4, 0xf5, 0xf5, 0xf5, 0xf5, 0xf6, 0xf6, 0xf6, 0xf7, 0xf7, 0xc9, 0x08, 0xf0, 0x27, 0xc9, 0x0a, 0xf0);
        this.memArray.push(0x3d, 0xc9, 0x0d, 0xf0, 0x39, 0xc9, 0x80, 0xf0, 0x7c, 0xc9, 0x81, 0xf0, 0x3b, 0xc9, 0x82, 0xf0, 0x64);
        this.memArray.push(0xc9, 0x83, 0xf0, 0x45, 0x20, 0x00, 0xfe, 0x84, 0xfd, 0xa0, 0x00, 0x91, 0xf7, 0x20, 0x9d, 0xfe, 0xa4);
        this.memArray.push(0xfd, 0x60, 0x48, 0x98, 0x48, 0x8a, 0x48, 0x20, 0xaf, 0xfe, 0x20, 0x00, 0xfe, 0xa0, 0x00, 0xa9, 0x20);
        this.memArray.push(0x91, 0xf7, 0xa6, 0x50, 0xca, 0x68, 0xaa, 0x68, 0xa8, 0x68, 0x60, 0x48, 0xa9, 0x00, 0x85, 0xf5, 0x20);
        this.memArray.push(0xca, 0xfe, 0x68, 0x60, 0x48, 0xe6, 0xf5, 0xa9, 0x50, 0xc5, 0xf5, 0xd0, 0x07, 0xa9, 0x00, 0x85, 0xf5); 
        this.memArray.push(0x20, 0xca, 0xfe, 0x68, 0x60, 0x48, 0xc6, 0xf5, 0x10, 0x14, 0xa5, 0xf6, 0xf0, 0x0a, 0xa9, 0x50, 0x85); 
        this.memArray.push(0xf5, 0x20, 0xda, 0xfe, 0x18, 0x90, 0x06, 0xa9, 0x00, 0x85, 0xf5, 0x85, 0xf6, 0x68, 0x60, 0x48, 0xe6);
        this.memArray.push(0xf6, 0xa9, 0x19, 0xc5, 0xf6, 0xd0, 0x05, 0x20, 0x2f, 0xff, 0xc6, 0xf6, 0x68, 0x60, 0xc6, 0xf6, 0x10);
        this.memArray.push(0x02, 0xe6, 0xf6, 0x60, 0x48, 0x98, 0x48, 0xa9, 0x00, 0x85, 0xf5, 0x85, 0xf6, 0x20, 0x00, 0xfe, 0xa0);
        this.memArray.push(0x00, 0xa9, 0x20, 0x91, 0xf7, 0xc8, 0xd0, 0xfb, 0xe6, 0xf8, 0xa5, 0xf8, 0xc9, 0xf8, 0xd0, 0xf1, 0x20);
        this.memArray.push(0x00, 0xfe, 0x68, 0x98, 0x68, 0x60, 0xa5, 0xff, 0xf0, 0x06, 0x48, 0xa9, 0x00, 0x85, 0xff, 0x68, 0x60);
        this.memArray.push(0xa0, 0x19, 0xa2, 0x50, 0x60, 0xb0, 0x0c, 0x86, 0xf5, 0x84, 0xf6, 0x20, 0x00, 0xfe, 0xa4, 0xf8, 0xa5);
        this.memArray.push(0xf7, 0x60, 0x20, 0x00, 0xfe, 0xa0, 0x00, 0xb1, 0xf7, 0xa6, 0xf5, 0xa4, 0xf6, 0x60);
        this.memArray.push(0x48, 0x98, 0x48, 0xa9, 0x00, 0x85, 0xfb, 0xa9, 0x50, 0x85, 0xf9, 0xa9, 0xf0, 0x85, 0xfa, 0x85, 0xfc, 0xa0, 0x00);
        this.memArray.push(0xb1, 0xf9, 0x91, 0xfb, 0xc8, 0xd0, 0xf9, 0xe6, 0xfa, 0xe6, 0xfc, 0xa9, 0xf7, 0xc5, 0xfa, 0xd0, 0xef, 0xb1, 0xf9);
        this.memArray.push(0x91, 0xfb, 0xc8, 0xc0, 0x80, 0xd0, 0xf7, 0xa0, 0x00, 0xa9, 0x20, 0x99, 0x80, 0xf7, 0xc8, 0xc0, 0x50, 0xd0, 0xf8);
        this.memArray.push(0x68, 0xa8, 0x68, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xe1, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x05, 0xff, 0x4c, 0x4e, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        this.memArray.push(0x4c, 0x10, 0xff, 0x4c, 0x15, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

    }

    set(addr, val) {
        // write data if not in the ROM range
        if ((addr >= 0x0000) && (addr < 0xfe00)) {
            return this.memArray[addr] = val;
        } else {
            return False;
        }
    }

    get(addr) {
        if (addr == 0xfe) {
            this.memArray[addr] = Math.floor(Math.random() * 256);
        }
        return this.memArray[addr];
    }

    getWord(addr) {
        return get(addr) + (get(addr + 1) << 8);
    }

    // Poke a byte, don't touch any registers
    storeByte(addr, value) {
        this.set(addr, value & 0xff);
        if ((addr >= 0x200) && (addr <= 0x5ff)) {
            this.display.updatePixel(addr);
        }
        if ((addr >= 0xf000) && (addr < 0xf000 + 80 * 25)) {
            this.screen.updateChar(addr);
        }
    }

    // Store keycode in ZP $ff
    storeKeydown(e) {
        let value = e.key;
        let code = 0;
        if (value.length == 1) {
            code = value.charCodeAt(0);
        } else if (value == "ArrowUp") {
            code = 0x80;
        } else if (value == "ArrowRight") {
            code = 0x81;
        } else if (value == "ArrowDown") {
            code = 0x82;
        } else if (value == "ArrowLeft") {
            code = 0x83;
        } else if (value == "Enter") {
            code = 0x0d;
        } else if (value == "Backspace") {
            code = 0x08;
        }
        if (code) {
            this.storeByte(0xff, code);
        }
        /*      e.stopPropagation(); */
        /*       e.preventDefault(); */
    }

    format(start, length) {
        let html = '';
        let n;

        for (let x = 0; x < length; x++) {
            if ((x & 15) === 0) {
                if (x > 0) {
                    html += "\n";
                }
                n = (start + x);
                html += num2hex(((n >> 8) & 0xff));
                html += num2hex((n & 0xff));
                html += ": ";
            }
            html += num2hex(this.get(start + x));
            html += " ";
        }
        return html;
    }

}
